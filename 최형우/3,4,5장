3장
저급 언어
- 기계어 : 0과 1로 이루어진 기계가 이해할 수 있는 명령어
- 어셈블리어 : 기계어를 사람이 읽기 편하도록 번역한 언어

고급언어 : 소스 코드를 컴파일러/인터프리터를 통해 목적코드로 변환
- 컴파일 언어 : 전체를 확인하여 컴파일 한 뒤, 한꺼번에 실행
- 인터프리터 언어 : 오류 발생 전까지 한줄씩 실행


명령어 :  연산코드(연산자) + 오퍼랜드(피연산자)

주소지정 방식 : 오퍼랜드당 할당된 데이터 크기가 있기때문에 데이터가 아닌 주소값을 주소 필드(오퍼랜드 필드)에 저장
 - 즉시 주소 지정 방식 : 주소가 아니라 직접 데이터를 담아줌
 - 직접 주소 지정 방식 : 유효 주소를 담아줌.   유효 주소(오퍼랜드) -> 데이터(메모리)
 - 간접 주소 지정 방식 : 유효 주소의 주소를 담아줌. 유효 주소의 주소(오퍼랜드) -> 유효 주소(메모리) -> 데이터(메모리)
 - 레지스터 주소 지정 방식 : 직접 주소 지정 방식과 유사 but 데이터는 레지스터에. 유효 주소(오퍼랜드) -> 데이터(레지스터)
 - 레지스터 간접 주소 지정 방식 : 데이터는 메모리에 담겨있고 주소가 레지스터에 있는 경우. 유효 주소의 주소(오퍼랜드) -> 유효 주소(레지스터) -> 데이터(메모리)



4장

ALU : 제어신호 + 피연산자  -> 결과값 + 플래그
	- 플래그 : 플래그 레지스터에 저장되는 결과값의 추가적인 상태 정보 ( p.106에 6가지 종류 )

제어장치 : 클럭 + 플래그(from 플래그 레지스터) + 해석할 명령어(from 명령어 레지스터) + 제어 신호 -> 제어 신호

레지스터 
	- 프로그램 카운터(명령어 포인터) : 메모리에서 가져올 명령어의 주소 저장. 이걸 이용해서 상대 주소 지정방식 사용
	- 명령어 레지스터 : 메모리에서 가져온 명령어를 저장
	- 메모리 주소 레지스터 : 메모리의 주소를 저장
	- 메모리 버퍼 레지스터(메모리 데이터 레지스터) : 메모리와 주고받을 값을 저장
	- 범용 레지스터 : 데이터&주소 자유롭게 저장 가능
	- 플래그 레지스터 : 플래그를 저장
	- 스택 포인터 : 스택 주소 지정 방식에 사용. 메모리 안 스택영역에서 데이터가 저장된 제일 윗 주소값이 저장되어 있음.
	- 베이스 레지스터 : 베이스 레지스터 주소 지정 방식에 사용.

	* 레지스터를 이용한 주소 지정 방식 - 스택 주소 지정 방식
							ㄴ 변위 주소 지정 방식 - 상대 주소 지정 방식
											ㄴ 베이스 레지스터 주소 지정 방식


명령어 사이클 : 인출 사이클 <-> 실행 사이클		+ 간접 사이클, 인터럽트 사이클

인터럽트 - 동기 인터럽트(예외) : CPU에 의해 발생하는 인터럽트
	    ㄴ 비동기 인터럽트(하드웨어 인터럽트) : 입출력장치에 의해 발생하는 인터럽트   - 막을 수 있는 인터럽트
															ㄴ 막을 수 없는 인터럽트

* 하드웨어 인터럽트 과정
1) 입출력장치가 CPU로 인터럽트 요청 신호
2) 인터럽트 플래그를 통해 인터럽트 가능 여부 확인
3) 인터럽트 벡터(인터럽트 종류에 따라 서비스 루틴의 시작 주소를 제공)를 참조하여 인터럽트 서비스 루틴 실행




5장

클럭 : 1초에 클럭이 몇번 반복되는지의 Hz 단위
코어(=CPU) : 명령어를 실행하는 부품을 여러 개 포함하는 부품. 멀티코어로 사용 시 꼭 비례하여 성능이 늘지는 않음
하드웨어적 스레드(논리 프로세서) : 하나의 코어가 동시에 처리하는 명령어 단위. 멀티스레드 프로세서(CPU)라고도 함. 코어 안에 레지스터 세트를 추가로 넣어서 동시 처리 가능
소프트웨어적 스레드 : 하나의 프로그램에서 독립적으로 실행되는 단위. 


* 명령어 처리기법 
1) 명령어 파이프라이닝 : 여러 명령어를 겹쳐서 수행. but 데이터 위험(데이터 의존성), 제어 위험(프로그램 카운터의 변화), 구조적 위험(명령어들이 동시에 부품의 사용하려할 때) 등의 위험 존재
2) 슈퍼스칼라 : 여러 라인을 둔 명령어 파이프라이닝
3) 비순차적 명령어 처리 : 데이터 의존성이 없는(순서 바꿔 실행해도 무방한) 명령어를 먼저 실행하는 방법


명령어 집합(ISA) : CPU가 이해할 수 있는 명령어들의 모음
1) CISC : 복잡하고(complex) 다양한 가변 길이 명령어 활용 -> 메모리 공간 절약 but 효율성 down
2) RISC : 단순하고 적은(reduced) 고정 길이 명령어 활용 -> 파이프 라이닝에 최적화. 레지스터를 많이 활용
